user:
Given the I/O interfaces of the usb_fs_phy.v:
'''
module usb_fs_phy
//-----------------------------------------------------------------
// Params
//-----------------------------------------------------------------
#(
     parameter USB_CLK_FREQ     = 60000000
)

(
    // Inputs
     input           clk_i
    ,input           rstn_i
    ,input  [  7:0]  utmi_data_out_i  // rx data for utmi interface
    ,input           utmi_txvalid_i  // tx valid signal for utmi interface
    ,input  [  1:0]  utmi_op_mode_i // no driven, always be 2'b01
    ,input  [  1:0]  utmi_xcvrselect_i // usb ls, hs or fs
    ,input           utmi_termselect_i // 1'b0 for hs term enable, 1'b1 for fs term enable
    ,input           utmi_dppulldown_i 
    ,input           utmi_dmpulldown_i
    ,input           usb_rx_rcv_i
    ,input           usb_rx_dp_i
    ,input           usb_rx_dn_i
    ,input           usb_reset_assert_i

    // Outputs
    ,output [  7:0]  utmi_data_in_o // tx data for utmi interface
    ,output          utmi_txready_o // tx readuy signal for utmi interface
    ,output          utmi_rxvalid_o // rx valid signal for utmi interface
    ,output          utmi_rxactive_o // rx data prepartion signal for utmi interface
    ,output          utmi_rxerror_o // if error happens in rx
    ,output [  1:0]  utmi_linestate_o // 2'b00 for SE0, 2'b01 for J, 2'b10 for K, 2'b11 for SE1
    ,output          usb_tx_dp_o
    ,output          usb_tx_dn_o
    ,output          usb_tx_oen_o
    ,output          usb_reset_detect_o
    ,output          usb_en_o
);

// Register definitions
reg rx_en_q;
reg out_dp_q;
reg out_dn_q;
reg [2:0] bit_count_q;
reg [2:0] ones_count_q;
reg [7:0] data_q;
reg send_eop_q;
reg sync_j_detected_q;
reg rx_dp_ms;
reg rx_dn_ms;
reg rxd_ms;
reg rx_dp0_q;
reg rx_dn0_q;
reg rx_dp1_q;
reg rx_dn1_q;
reg rx_dp_q;
reg rx_dn_q;
reg rxd0_q;
reg rxd1_q;
reg rxd_q;
reg [STATE_W-1:0] state_q;
reg [STATE_W-1:0] next_state_r;
reg rx_error_q;
reg rxd_last_q;
reg [2:0] sample_cnt_q;
reg adjust_delayed_q;
reg rxd_last_j_q;
reg rx_ready_q;
reg tx_ready_q;
reg [6:0] se0_cnt_q;

// Wire definitions
wire in_dp_w;
wire in_dn_w;
wire in_rx_w;
wire in_j_w;
wire in_k_w;
wire in_se0_w;
wire in_invalid_w;
wire sample_w;
wire bit_edge_w;
wire bit_transition_w;
wire bit_stuff_bit_w;
wire next_is_bit_stuff_w;
wire usb_reset_assert_w;

// Logic for the USB PHY to be implemented here
always @(posedge clk_i or negedge rstn_i) begin
    if (~rstn_i) begin
        rx_dp_ms <= 1'b0;
        rx_dn_ms <= 1'b0;
        rxd_ms   <= 1'b0;
    end else begin
        rx_dp_ms <= in_dp_w;
        rx_dn_ms <= in_dn_w;
        rxd_ms   <= in_rx_w;
    end
end

always @(posedge clk_i or negedge rstn_i) begin
    if (~rstn_i) begin
        rx_dp0_q <= 1'b0;
        rx_dn0_q <= 1'b0;
        rx_dp1_q <= 1'b0; 
        rx_dn1_q <= 1'b0; 
        rx_dp_q  <= 1'b0; 
        rx_dn_q  <= 1'b0; 
        rxd0_q   <= 1'b0; 
        rxd1_q   <= 1'b0;
        rxd_q    <= 1'b0;
    end else begin
        rx_dp_q <= (rx_dp0_q & rx_dp1_q) ? 1'b1 : (!rx_dp0_q & !rx_dp1_q) ? 1'b0 : rx_dp_q;
        rx_dn_q <= (rx_dn0_q & rx_dn1_q) ? 1'b1 : (!rx_dn0_q & !rx_dn1_q) ? 1'b0 : rx_dn_q;
        rxd_q   <= (rxd0_q & rxd1_q) ? 1'b1 : (!rxd0_q & !rxd1_q) ? 1'b0 : rxd_q;

        rx_dp1_q <= rx_dp0_q;
        rx_dp0_q <= rx_dp_ms;
        rx_dn1_q <= rx_dn0_q;
        rx_dn0_q <= rx_dn_ms; 
        rxd1_q   <= rxd0_q;
        rxd0_q   <= rxd_ms;
    end
end

'''
We need to implement the action code of th state STATE_TX_EOP_STUFF:
'''
always @ (posedge clk_i or negedge rstn_i)
begin
    if (!rstn_i)
    begin
        sync_j_detected_q  <= 1'b0;
        rx_error_q  <= 1'b0;
        sample_cnt_q        <= 3'd0;
        adjust_delayed_q    <= 1'b0;
        rxd_last_j_q  <= 1'b0;
        ones_count_q <= 3'd1;
        bit_count_q <= 3'b0;
        data_q  <= 8'b0;
        rx_ready_q <= 1'b0;
        tx_ready_q <= 1'b0;
        send_eop_q  <= 1'b0;
        out_dp_q <= 1'b0;
        out_dn_q <= 1'b0;
        rx_en_q  <= 1'b1;
    end
    else 
    begin
        case (state_q)
......
        STATE_TX_EOP_STUFF:
// code here
......
        endcase
    end
end
'''

Here are the actions that should do:
1. Rx Error Detection: Rx bit stuffing error
2. Sample Timer: Delayed adjustment
3. NRZI Receiver: if sample_w, set rxd_last_j_q to 1'b0
4. Set rx_ready_q and tx_ready_q to 1'b0
5. Do Tx.

The Rx Error Detection should be:
1. if ones_count_q is equal to 3'd7 or if in_invaliid_w && sample_w: rx_error_q will be set to 1'b1
2. else rx_error_q will be set to 1'b0

The Sample Timer action should be:
1. if adjust_delayed_q then it wiil be set to 1'b0
2. else begin
if sample_cnt_q is equal to  SAMPLE_RATE then sample_cnt_q will be set to 'b0
else will be set to be itself increse one
end

The Tx logic should add if sample_w judgement.

gpt4:
The action code for the state `STATE_TX_EOP_STUFF` can be implemented as follows:

```verilog
STATE_TX_EOP_STUFF:
begin
    // Rx Error Detection: Rx bit stuffing error
    if ((ones_count_q == 3'd7) || (in_invalid_w && sample_w))
        rx_error_q <= 1'b1;
    else
        rx_error_q <= 1'b0;
    
    // Sample Timer: Delayed adjustment
    if (adjust_delayed_q)
        adjust_delayed_q <= 1'b0;
    else
    begin
        if (sample_cnt_q == SAMPLE_RATE)
            sample_cnt_q <= 3'd0;
        else
            sample_cnt_q <= sample_cnt_q + 1'b1;
    end
    
    // NRZI Receiver: Set rxd_last_j_q to 1'b0 if sample_w
    if (sample_w)
        rxd_last_j_q <= 1'b0;
    
    // Set rx_ready_q and tx_ready_q to 1'b0
    rx_ready_q <= 1'b0;
    tx_ready_q <= 1'b0;
    
    // Do Tx (add your logic here based on the sample_w condition)
    if (sample_w)
    begin
        // Tx logic goes here
    end
end
```

Please note that the actual Tx logic needs to be implemented based on the requirement of your design. The provided code sets the necessary signals and variables according to the given actions but does not include the specific implementation for the Tx logic.

user:
The NRZI Receiver should assign in_j_w to rxd_last_j_q.
The Tx logic is if !data_q[0] or bit_stuff_bit_w,
then out_dp_q <= ~out_dp_q and out_dn_q <= ~out_dn_q.

gpt4:
Apologies for the oversight. Here's the updated code for the NRZI Receiver and Tx logic within the `STATE_TX_EOP_STUFF`:

```verilog
STATE_TX_EOP_STUFF:
begin
    // Rx Error Detection: Rx bit stuffing error
    if ((ones_count_q == 3'd7) || (in_invalid_w && sample_w))
        rx_error_q <= 1'b1;
    else
        rx_error_q <= 1'b0;
    
    // Sample Timer: Delayed adjustment
    if (adjust_delayed_q)
        adjust_delayed_q <= 1'b0;
    else
    begin
        if (sample_cnt_q == SAMPLE_RATE)
            sample_cnt_q <= 3'd0;
        else
            sample_cnt_q <= sample_cnt_q + 1'b1;
    end
    
    // NRZI Receiver: Assign in_j_w to rxd_last_j_q if sample_w
    if (sample_w)
        rxd_last_j_q <= in_j_w;
    
    // Set rx_ready_q and tx_ready_q to 1'b0
    rx_ready_q <= 1'b0;
    tx_ready_q <= 1'b0;
    
    // Do Tx
    if (sample_w)
    begin
        // Tx logic
        if (!data_q[0] || bit_stuff_bit_w)
        begin
            out_dp_q <= ~out_dp_q;
            out_dn_q <= ~out_dn_q;
        end
    end
end
```

Please note that this code assumes that `in_j_w` is a valid input signal, and the Tx logic is updated to toggle `out_dp_q` and `out_dn_q` based on the given condition.
