name= Riscduino Boards
version=1.0.2

# Compile variables
# ----------------------

compiler.path={runtime.tools.riscv64-unknown-elf-gcc.path}/bin/
compiler.c.cmd=riscv64-unknown-elf-gcc
compiler.cpp.cmd=riscv64-unknown-elf-g++
compiler.ld.cmd=riscv64-unknown-elf-ld
compiler.ar.cmd=riscv64-unknown-elf-ar
compiler.objcopy.cmd=riscv64-unknown-elf-objcopy
compiler.elf2hex.cmd=riscv64-unknown-elf-objcopy
compiler.size.cmd=riscv64-unknown-elf-size


compiler.sdk.path={runtime.platform.path}/sdk/bsp
compiler.preproc.flags=-I{build.system.path}/include -I{compiler.sdk.path}/include -I{compiler.sdk.path}/env -I{compiler.sdk.path}/drivers -I{compiler.sdk.path}/env/{build.boardenv} -I{compiler.sdk.path}/env/uncache -I{runtime.tools.riscv64-unknown-elf-gcc.path}/riscv64-unknown-elf/include/c++/10.2.0/riscv64-unknown-elf/rv32imc/ilp32


compiler.c.flags=-c -O2 -march={build.mcu} -mabi=ilp32 -fpeel-loops -ffreestanding -ffunction-sections -fdata-sections -Wall {compiler.preproc.flags} -include sys/cdefs.h -g

compiler.cpp.flags=-c -O2 -march={build.mcu} -mabi=ilp32 -fpeel-loops -ffreestanding -ffunction-sections -fdata-sections -fpermissive -Wall -fno-rtti -fno-exceptions {compiler.preproc.flags} -include sys/cdefs.h -g

compiler.ld.flags=-T {build.ldscript} -nostartfiles -Wl,-N -Wl,--gc-sections -Wl,--wrap=malloc -Wl,--wrap=free -Wl,--wrap=sbrk

compiler.S.flags=-c -march={build.mcu} -mabi=ilp32 {compiler.preproc.flags} -g

compiler.ar.flags=rcs

compiler.objcopy.eep.flags=-O srec

compiler.elf2hex.flags=-R .rel.dyn

compiler.define=-DARDUINO=

compiler.c.extra_flags=-DF_CPU={build.f_cpu}L -D{build.board}
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=-DF_CPU={build.f_cpu}L -D{build.board}
compiler.S.extra_flags=-DF_CPU={build.f_cpu}L -D{build.board}
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# Can be overridden in boards.txt
build.extra_flags=

# USB Flags
# ---------
build.usb_flags=
build.openocdcfg=

# Compile patterns
# ---------------------

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Link gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.cpp.cmd}" -march={build.mcu} -mabi=ilp32 {compiler.ld.flags} {build.extra_flags} {object_files} -nostdlib -Wl,--start-group "{archive_file_path}" -lm -lstdc++ -lc -lgloss -Wl,--end-group -lgcc -o "{build.path}/{build.project_name}.elf"

## Create binary
recipe.objcopy.eep.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} -O binary "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} -O verilog "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -B "{build.path}/{build.project_name}.elf"
recipe.size.regex=\s*[0-9]+\s+[0-9]+\s+[0-9]+\s+([0-9]+).*


# Uploader tools
# -------------------
tools.rdnodude.path={runtime.tools.rdnodude.path}
tools.rdnodude.cmd.path={path}/bin/rdnodude

tools.rdnodude.upload.params.verbose=
tools.rdnodude.upload.verify=
tools.rdnodude.upload.params.noverify=

tools.rdnodude.upload.pattern="{cmd.path}" {upload.verbose} {upload.verify} {serial.port} {upload.speed} {build.path}/{build.project_name}.hex

tools.rdnodude.program.params.verbose=
tools.rdnodude.program.params.quiet=
tools.rdnodude.program.verify=
tools.rdnodude.program.params.noverify=
tools.rdnodude.program.pattern="{cmd.path}" {upload.verbose} {upload.verify} {serial.port} {upload.speed} {build.path}/{build.project_name}.hex


tools.rdnodude.erase.params.verbose=
tools.rdnodude.erase.params.quiet=
tools.rdnodude.erase.pattern="{cmd.path}" {upload.verbose} {upload.verify} {serial.port} {upload.speed} {build.path}/{build.project_name}.hex

tools.rdnodude.bootloader.params.verbose=
tools.rdnodude.bootloader.params.quiet=
tools.rdnodude.bootloader.pattern="{cmd.path}" {upload.verbose} {upload.verify} {serial.port} {upload.speed} {build.path}/{build.project_name}.hex

